// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id                  String           @id @default(uuid())
  email               String           @unique
  name                String?
  password            String
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  studentId           String           @unique @default(uuid())
  major               Major            @relation(fields: [majorId], references: [id])
  majorId             Int              @default(1)
  class               String           @default("")
  interest            String[]
  liveIn              String?          @default("Ha Noi")
  city                String?
  district            String?
  Birthday            DateTime?        @default(now())
  schoolYear          Int              @default(2020)
  messagesPrivateFrom MessagePrivate[] @relation("fromUser")
  messagesPrivateTo   MessagePrivate[] @relation("toUser")
  refreshToken        String?
  resetToken          String?
  avatarUrl           String?
  gender              String?
  phone               String?
  Posts               Post[]
  Comments            Comment[]
  Likes               Like[]
  role                String           @default("USERS")
  friendsSrc          Friend[]         @relation("src")
  friendsTarget       Friend[]         @relation("target")
  notifications       Notification[]
  statusAccount       String           @default("INACTIVE")
  followsSrc          Follow[]         @relation("src")
  followsTarget       Follow[]         @relation("target")
  groupMembers        GroupMember[]
  Report              Report[]         @relation("reported")
  ReportSrc           Report[]         @relation("srcreport")
  Group               Group[]
  ActiveCode          ActiveCode[]

  @@map("users")
}

model ActiveCode {
  id        Int      @id @default(autoincrement())
  code      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@map("active_codes")
}

model Major {
  id         Int          @id @default(autoincrement())
  name       String
  acronym    String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  users      User[]
  classCount classCount[]

  @@map("majors")
}

model classCount {
  id         Int   @id @default(autoincrement())
  majorId    Int
  major      Major @relation(fields: [majorId], references: [id])
  schoolYear Int
  count      Int

  @@map("class_count")
}

model MessagePrivate {
  id         Int      @id @default(autoincrement())
  content    String
  imageUrl   String?
  fromUserId String
  toUserId   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  fromUser   User     @relation("fromUser", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser     User     @relation("toUser", fields: [toUserId], references: [id], onDelete: Cascade)
  status     String   @default("UNREAD")
  subKey     String   @default("")

  @@map("message_privates")
}

model Post {
  id        String    @id @default(uuid())
  title     String
  content   String
  imageUrl  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  comments  Comment[]
  likes     Like[]
  type      String    @default("PERSONAL")
  groupId   String?
  group     Group?    @relation(fields: [groupId], references: [id])
  reports   Report[]

  @@map("posts")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  fatherId  String?  @default("")
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  likes     Like[]
  reports   Report[]
  GroupId   String?  @default("")

  @@map("comments")
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  commentId String?  @default("")
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@map("likes")
}

model Friend {
  id        Int      @id @default(autoincrement())
  userId    String
  friendId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation("src", fields: [userId], references: [id])
  friend    User     @relation("target", fields: [friendId], references: [id])
  status    String   @default("PENDING")
  subKey    String   @default("")

  @@map("friends")
}

model Notification {
  id              String   @id @default(uuid())
  content         String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  status          String   @default("UNREAD")
  type            String   @default("POST")
  sourceAvatarUrl String?
  meta            String?

  @@map("notifications")
}

model Follow {
  id        Int      @id @default(autoincrement())
  userId    String
  followId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation("src", fields: [userId], references: [id])
  follow    User     @relation("target", fields: [followId], references: [id])

  @@map("follows")
}

model GroupMember {
  id        Int      @id @default(autoincrement())
  userId    String
  groupId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  group     Group    @relation(fields: [groupId], references: [id])
  status    String   @default("PENDING")

  @@map("group_members")
}

model Group {
  id        String        @id @default(uuid())
  name      String
  OwnerId   String
  owner     User          @relation(fields: [OwnerId], references: [id])
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  members   GroupMember[]
  posts     Post[]

  @@map("groups")
}

model Report {
  id           String   @id @default(uuid())
  content      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String
  user         User     @relation("srcreport", fields: [userId], references: [id])
  postId       String
  type         String   @default("POST")
  reportedId   String
  userReported User     @relation("reported", fields: [reportedId], references: [id])
  post         Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  commentId    String?
  comment      Comment? @relation(fields: [commentId], references: [id])

  @@map("reports")
}
